#!/usr/bin/env python3
import secrets
import string
import argparse


def generate_password(length, num_digits=1, num_uppers=1, num_specials=1):
    if length < (num_digits + num_uppers + num_specials):
        raise ValueError("Password length is too short for the given constraints.")

    # Character sets
    digits = string.digits
    lowers = string.ascii_lowercase
    uppers = string.ascii_uppercase
    specials = string.punctuation

    # Generate the required number of each character type
    password_chars = []
    password_chars.extend(secrets.choice(digits) for _ in range(num_digits))
    password_chars.extend(secrets.choice(uppers) for _ in range(num_uppers))
    password_chars.extend(secrets.choice(specials) for _ in range(num_specials))

    # Calculate remaining characters and fill with random choices from all sets
    remaining_length = length - len(password_chars)
    all_chars = (
        lowers
        + ("" if num_digits == 0 else digits)
        + ("" if num_uppers == 0 else digits)
        + ("" if num_specials == 0 else specials)
    )
    password_chars.extend(secrets.choice(all_chars) for _ in range(remaining_length))

    # Shuffle to ensure random order
    secrets.SystemRandom().shuffle(password_chars)

    # Join to form the final password
    password = "".join(password_chars)
    return password


def main():
    parser = argparse.ArgumentParser(description="Generate a secure random password.")
    parser.add_argument("length", type=int, help="Total length of the password.")
    parser.add_argument(
        "--digits",
        type=int,
        default=1,
        help="Minimum number of digits in the password.",
    )
    parser.add_argument(
        "--capitals",
        type=int,
        default=1,
        help="Minimum number of capital letters in the password.",
    )
    parser.add_argument(
        "--specials",
        type=int,
        default=1,
        help="Minimum number of special characters in the password.",
    )

    args = parser.parse_args()

    try:
        password = generate_password(
            args.length, args.digits, args.capitals, args.specials
        )
        print(password)
    except ValueError as e:
        print(e)


if __name__ == "__main__":
    main()
